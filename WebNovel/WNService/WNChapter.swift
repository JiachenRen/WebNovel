//
//  WNChapter.swift
//  WebNovel
//
//  Created by Jiachen Ren on 6/15/19.
//  Copyright Â© 2019 Jiachen Ren. All rights reserved.
//

import Foundation

class WNChapter: Serializable, CustomStringConvertible {
    typealias ManagedObject = Chapter
    
    /// Reference to the web novel that this chapter belongs to
    var webNovelUrl: String
    
    /// URL from which the chapter is retrieved
    var url: String
    
    /// Short name of the chapter, e.g. c32, s3
    var name: String
    
    /// Wether the chapter is downloaded
    var isDownloaded = false
    
    /// Raw html content of the chapter
    var rawHtml: String?
    
    /// This is used to calculate storage space used
    var byteCount: Int?

    /// Article contains relevant reader's info generated by a
    /// non-host-specific, generic parser, namely Readability.js
    var article: Article?
    
    /// Id of the chapter
    var id: Int
    
    init(_ webNovelUrl: String, url: String, name: String, id: Int) {
        self.webNovelUrl = webNovelUrl
        self.url = url
        self.name = name
        self.id = id
    }
    
    /// Extracts chapter number and title from raw title string
    private func parseChapterTitle() -> (chapter: Int, title: String)? {
        guard let rawTitleStr = article?.title else {
            return nil
        }
        var chapter: Int?, title: String?
        let pattern = #"[cC]hapter\s*([0-9]+)[\:\-\s]+(.*)"#
        let regex = try! NSRegularExpression(pattern: pattern, options: [])
        let range = NSRange(location: 0, length: rawTitleStr.utf16.count)
        if let match = regex.firstMatch(in: rawTitleStr, options: [], range: range) {
            if let chapterRange = Range(match.range(at: 1), in: rawTitleStr) {
                chapter = Int(rawTitleStr[chapterRange])
            }
            if let titleRange = Range(match.range(at: 2), in: rawTitleStr) {
                title = String(rawTitleStr[titleRange])
            }
        }
        guard let ch = chapter, let t = title else {
            return nil
        }
        return (ch, t)
    }
    
    /// - Returns: Properly formatted chapter title in the following format:
    /// Chapter <#>: <Name>
    func properTitle() -> String? {
        guard let (ch, t) = parseChapterTitle() else {
            return nil
        }
        return "Chapter \(ch): \(t)"
    }
    
    var description: String {
        return """
        Web Novel Link: \(webNovelUrl)
        ID: \(id)
        Chapter: \(name)
        Link: \(url)
        Article: \(article?.description ?? "N/A")
        """
    }
}
